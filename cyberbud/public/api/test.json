{
    "response1": "#include <iostream>\n#include <string>\n#include <mysql/mysql.h>\nint main() {\n    // Input from the user\n    std::string username;\n    std::cout << 'Enter your username: ';\n    std::cin >> username;\n\n    // Vulnerable SQL query\n    std::string query = 'SELECT * FROM users WHERE username='' + username + ''';\n\n    MYSQL* connection = mysql_init(NULL);\n    if (mysql_real_connect(connection, 'localhost', 'username', 'password', 'database', 0, NULL, 0)) {\n        if (mysql_query(connection, query.c_str()) == 0) {\n            MYSQL_RES* result = mysql_store_result(connection);\n            if (result != nullptr) {\n                MYSQL_ROW row;\n                while ((row = mysql_fetch_row(result))) {\n                    std::cout << 'Welcome, ' << row[1] << '!' << std::endl;\n                }\n                mysql_free_result(result);\n            } else {\n                std::cout << 'Login failed.' << std::endl;\n            }\n            mysql_close(connection);\n        }\n    }\n\n    return 0;\n}",    
    "response2": "import scapy.all as scapy\n\n# Define a list of trusted IP addresses\ntrusted_ips = [\"192.168.1.1\", \"192.168.1.2\"]\n\ndef process_packet(packet):\n    if packet.haslayer(scapy.IP):\n        source_ip = packet[scapy.IP].src\n        if source_ip not in trusted_ips:\n            print(f\"Potential spoofing attempt detected from {source_ip}\")\n\n# Sniff network packets\nscapy.sniff(filter=\"ip\", prn=process_packet)",
    "response3" : ""
}